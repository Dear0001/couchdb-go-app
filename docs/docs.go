// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/documents": {
            "get": {
                "description": "Retrieve all documents based on criteria",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Get all documents",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Document"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new document with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Create a new document",
                "parameters": [
                    {
                        "description": "Document to create",
                        "name": "document",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RequestDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Document"
                        }
                    }
                }
            }
        },
        "/documents/filter": {
            "get": {
                "description": "Retrieve documents where age is between n1 and n2 and class matches the user-provided input",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Filter documents by an age range and class",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Minimum Age to filter by",
                        "name": "min_age",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum Age to filter by",
                        "name": "max_age",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Class to filter by",
                        "name": "class",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Document"
                            }
                        }
                    }
                }
            }
        },
        "/documents/{id}": {
            "get": {
                "description": "Get details of a document by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Get a document by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Document"
                        }
                    }
                }
            },
            "put": {
                "description": "Update details of a document by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Update a document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated document",
                        "name": "document",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RequestUpdateDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Document"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a document by its ID",
                "tags": [
                    "documents"
                ],
                "summary": "Delete a document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/file/{stu-id}/{filename}": {
            "get": {
                "description": "Retrieve a file from CouchDB for a specific student document",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "file"
                ],
                "summary": "Get a file (attachment) by filename and student ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student ID (Document ID)",
                        "name": "stu-id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filename to retrieve",
                        "name": "filename",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File retrieved successfully",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/upload/{stu-id}": {
            "post": {
                "description": "Upload a file and store it as an attachment in a student's CouchDB document",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "file"
                ],
                "summary": "Upload a file and attach it to a specific student's document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student ID (Document ID)",
                        "name": "stu-id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File uploaded successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to upload file",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Attachment": {
            "type": "object",
            "properties": {
                "content_type": {
                    "type": "string"
                },
                "filename": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "models.Document": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "_rev": {
                    "type": "string"
                },
                "age": {
                    "type": "integer"
                },
                "attachment": {
                    "$ref": "#/definitions/models.Attachment"
                },
                "class": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "majors": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.RequestDoc": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "age": {
                    "type": "integer"
                },
                "attachment": {
                    "$ref": "#/definitions/models.Attachment"
                },
                "class": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "majors": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.RequestUpdateDoc": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "attachment": {
                    "$ref": "#/definitions/models.Attachment"
                },
                "class": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "majors": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Student API",
	Description:      "This is a sample server for managing students.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
